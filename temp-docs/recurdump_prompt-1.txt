Ok so, I think we need a new python script for this project. Let's call it "rdump-sync.py" and we should save it in a folder in the project with the folder name "scripts". This script should required two different arguments - each with their own argument flag.

The first required argument should be for the user to give the path to a CSV file - this file pointed to will be for the extracted database generated by our firefox extension titled "RecurTrack".

The second required argument should be for the user to specify a specific directory where the user keeps a collection of video files. this script should allow for the user to use the "." character to specify the the path for this argument is the current working directory they are in.

When run, the script needs to load the database file pointed to by the first required argument and should extract the filenames from the column with the column title "Filename", then the script needs to scan the directory that the user provided in the second required argument. If there are any filenames from the first required argument (the argument for the input csv database file that was originally exported from our RecurTrack Firefox extension) that are not found when scanning the directory (provided by the user in the second required argument), the script should export a new csv database file that is formatted in the exact same way as the input database file - meaning the exported csv file will have the columns "URL", "Filename", and "Extracted At") - this newly exported should only contain the columns from the original input file that are not found in the input directory path. The exported file should have a file name in the following format: "[MODEL NAME]_need-to-download_MM-DD-YY.csv". The script can determine the value for [MODEL NAME] from the input database file (the model name can found by extracting the first part of the filename up to the point where it says "_"then the date and time). This exported new file should default to be save in the input directory provided by the user. Lastly, this script needs to ensure that there are no duplicate rows (with url, filename, and extracted at) in the exported csv file.

This script should have multiple optional argument (all of these should have their own argument flag):

- an argument for backing up the input database file

- an argument for specifying a different directory for the exported csv file and a specific / different filename for the exported file

- an argument for ensuring that the outputed files is sorted by any of the columns and possibly an additional argument for this one for determining if the sorting should be ascending or decending

Finally, if the user uses the "--help" or "-h" argument, the script should prompt the user with a detailed explanation of what the script does and how to use is (however, this help information prompt sould not be too long or too complicated). Also, if the user inputs incorrect arguments / information or no arguments at all, the script should prompt the user with this help information prompt. 

I know this is a ton of work but thank you so much for the help!

